[tool.poetry]
name = "djpoe"
version = "0.1.0"
description = ""
authors = ["Piotr Zalewa <zaloon@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.1"
django-extensions = "^3.2.3"
gunicorn = "^23.0.0"
django-environ = "^0.11.2"
psycopg2-binary = "^2.9.9"
django-allauth = { extras = ["google", "socialaccount"], version = "^64.2.1" }
wagtail = "^6.2.1"


[tool.poetry.group.dev.dependencies]
pytest-django = "^4.9"
ruff = "^0.6"
pylint = "^3"
pylint-django = "^2.5"
pylint-per-file-ignores = "^1.3"
mypy = "^1.11"
django-stubs = "^5"
pytest-coverage = "^0.0"
django-stubs-ext = "^5.0"
django-types = "^0.19"
pytest = "^8.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
exclude = [
    ".direnv",
    ".git",
    ".git-rewrite",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    ".vscode",
    "node_modules",
]
line-length = 120
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
ignore = ["ISC001", "D203", "D213", "TRY003", "EM101"]
select = [
    "ANN", # flake8-annotations
    "ARG", # flake8-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe complexity
    "D",   # pydocstyle
    "DJ",  # flake8-django
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle
    "EM",  # flake8-errmsg
    "F",   # flake8
    "G",   # flake8-logging-format
    "I",   # isort
    "ISC", # flake8-implicit-str-concat
    "LOG", # flake8-logging
    "N",   # pep8-naming
    "PIE", # flake8-pie
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # ruff-specific rules
    "Q",   # flake8-quotes
    # "S",   # flake8-bandit
    "SIM", # flake8-simplify
    "T10", # flake8-print
    "TCH", # flake8-type-checking
    "TRY", # tryceratops
    "UP",  # pyupgrade
]

fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "ANN"]
"__init__.py" = ["D"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.flake8-pytest-style]
mark-parentheses = false

[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120
disable = ["fixme", "too-many-arguments"]
load-plugins = ["pylint_per_file_ignores", "pylint_django"]
per-file-ignores = """
    /tests/:missing-function-docstring,assignment-from-no-return,not-context-manager,django-not-configured,imported-auth-user,missing-module-docstring
    /migrations/:invalid-name,missing-class-docstring,wrong-import-order
    models.py:too-many-ancestors
    manage.py:import-outside-toplevel
"""
django-settings-module = "djpoe.settings"
init-hook = 'import sys; sys.path.append("./djpoe")'

[tool.mypy]
plugins = ["mypy_django_plugin.main"]
mypy_path = "./djpoe"

[tool.django-stubs]
django_settings_module = "djpoe.settings"
ignore_missing_model_attributes = true

[tool.poe.tasks.test]
help = "Pytest with coverage."
cmd = "pytest --showlocals --tb=auto -ra --cov-branch --cov-report=term-missing"

[tool.poe.tasks.mypy]
cmd = "mypy --install-types --check-untyped-defs ."

[tool.poe.tasks.pylint]
cmd = "pylint tests djpoe/djpoe"

[tool.poe.tasks.ruff]
cmd = "ruff check ."

[tool.poe.tasks.check]
sequence = ["mypy", "pylint", "ruff"]

[tool.poe.tasks.format]
cmd = "ruff format ."

[tool.poe.tasks.dev]
help = "Run development server."
cmd = "python ./djpoe/manage.py runserver 127.0.0.1:8001"

[tool.poe.tasks.makemigrations]
help = "Generate new migrations."
cmd = "python ./djpoe/manage.py makemigrations"

[tool.poe.tasks.migrate]
help = "Migrate existing migrations."
cmd = "python ./djpoe/manage.py migrate"

[tool.poe.tasks.manage]
cmd = "python ./djpoe/manage.py"

[tool.poe.tasks.find_updates]
shell = "poetry show --outdated | grep --file=<(poetry show --tree | grep '^\\w' | sed 's/^\\([^ ]*\\).*/^\\1/')"
interpreter = "bash"
